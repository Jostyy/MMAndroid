package br.unb.mobileMedia.core.domain;

import java.util.List;

import br.unb.mobileMedia.core.db.DaoSession;
import br.unb.mobileMedia.core.db.PlaylistDao;
import br.unb.mobileMedia.core.db.PlaylistMediaDao;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
/**
 * Entity mapped to table PLAYLIST.
 */
public class Playlist {
	private Long id;
	private String title;
	/** Used to resolve relations */
	private transient DaoSession daoSession;
	/** Used for active entity operations. */
	private transient PlaylistDao myDao;
	private List<PlaylistMedia> listPlaylistMediaPlaylistM;

	public Playlist() {
	}

	public Playlist(Long id) {
		this.id = id;
	}

	public Playlist(Long id, String title) {
		this.id = id;
		this.title = title;
	}

	/** called by internal mechanisms, do not call yourself. */
	public void __setDaoSession(DaoSession daoSession) {
		this.daoSession = daoSession;
		myDao = daoSession != null ? daoSession.getPlaylistDao() : null;
	}

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public String getTitle() {
		return title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	/**
	 * To-many relationship, resolved on first access (and after reset). Changes
	 * to to-many relations are not persisted, make changes to the target
	 * entity.
	 */
	public List<PlaylistMedia> getListPlaylistMediaPlaylistM() {
		if (listPlaylistMediaPlaylistM == null) {
			if (daoSession == null) {
				throw new DaoException("Entity is detached from DAO context");
			}
			PlaylistMediaDao targetDao = daoSession.getPlaylistMediaDao();
			List<PlaylistMedia> listPlaylistMediaPlaylistMNew = targetDao
					._queryPlaylist_ListPlaylistMediaPlaylistM(id);
			synchronized (this) {
				if (listPlaylistMediaPlaylistM == null) {
					listPlaylistMediaPlaylistM = listPlaylistMediaPlaylistMNew;
				}
			}
		}
		return listPlaylistMediaPlaylistM;
	}

	/**
	 * Resets a to-many relationship, making the next get call to query for a
	 * fresh result.
	 */
	public synchronized void resetListPlaylistMediaPlaylistM() {
		listPlaylistMediaPlaylistM = null;
	}

	/**
	 * Convenient call for {@link AbstractDao#delete(Object)}. Entity must
	 * attached to an entity context.
	 */
	public void delete() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.delete(this);
	}

	/**
	 * Convenient call for {@link AbstractDao#update(Object)}. Entity must
	 * attached to an entity context.
	 */
	public void update() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.update(this);
	}

	/**
	 * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must
	 * attached to an entity context.
	 */
	public void refresh() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.refresh(this);
	}
}