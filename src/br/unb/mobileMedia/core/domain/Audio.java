package br.unb.mobileMedia.core.domain;

import java.util.List;

import br.unb.mobileMedia.core.db.AlbumDao;
import br.unb.mobileMedia.core.db.AudioDao;
import br.unb.mobileMedia.core.db.DaoSession;
import br.unb.mobileMedia.core.db.HistoryDao;
import br.unb.mobileMedia.core.db.PlaylistMediaDao;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table AUDIO.
 */
public class Audio {

    private Long id;
    private String title;
    private long albumId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AudioDao myDao;

    private Album album;
    private Long album__resolvedKey;

    private List<History> audiosHistory;
    private List<PlaylistMedia> listPlaylistMediaAudio;

    public Audio() {
    }

    public Audio(Long id) {
        this.id = id;
    }

    public Audio(Long id, String title, long albumId) {
        this.id = id;
        this.title = title;
        this.albumId = albumId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAudioDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public long getAlbumId() {
        return albumId;
    }

    public void setAlbumId(long albumId) {
        this.albumId = albumId;
    }

    /** To-one relationship, resolved on first access. */
    public Album getAlbum() {
        long __key = this.albumId;
        if (album__resolvedKey == null || !album__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AlbumDao targetDao = daoSession.getAlbumDao();
            Album albumNew = targetDao.load(__key);
            synchronized (this) {
                album = albumNew;
            	album__resolvedKey = __key;
            }
        }
        return album;
    }

    public void setAlbum(Album album) {
        if (album == null) {
            throw new DaoException("To-one property 'albumId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.album = album;
            albumId = album.getId();
            album__resolvedKey = albumId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<History> getAudiosHistory() {
        if (audiosHistory == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            HistoryDao targetDao = daoSession.getHistoryDao();
            List<History> audiosHistoryNew = targetDao._queryAudio_AudiosHistory(id);
            synchronized (this) {
                if(audiosHistory == null) {
                    audiosHistory = audiosHistoryNew;
                }
            }
        }
        return audiosHistory;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetAudiosHistory() {
        audiosHistory = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<PlaylistMedia> getListPlaylistMediaAudio() {
        if (listPlaylistMediaAudio == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PlaylistMediaDao targetDao = daoSession.getPlaylistMediaDao();
            List<PlaylistMedia> listPlaylistMediaAudioNew = targetDao._queryAudio_ListPlaylistMediaAudio(id);
            synchronized (this) {
                if(listPlaylistMediaAudio == null) {
                    listPlaylistMediaAudio = listPlaylistMediaAudioNew;
                }
            }
        }
        return listPlaylistMediaAudio;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetListPlaylistMediaAudio() {
        listPlaylistMediaAudio = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
