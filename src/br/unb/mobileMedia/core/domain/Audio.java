package br.unb.mobileMedia.core.domain;

import java.net.URI;
import java.util.List;

import android.os.Parcel;
import android.os.Parcelable;
import br.unb.mobileMedia.core.db.AudioDao;
import br.unb.mobileMedia.core.db.DaoSession;
import br.unb.mobileMedia.core.db.HistoryDao;
import br.unb.mobileMedia.core.db.PlaylistMediaDao;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table AUDIO.
 */
public class Audio implements Parcelable{

    private Long id;
    private String title;
    private String url;
    private String album;
    private long AuthorId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AudioDao myDao;

    private List<History> audiosHistory;
    private List<PlaylistMedia> listPlaylistMediaAudio;

    public Audio() {
    }

    public Audio(Long id) {
        this.id = id;
    }

    public Audio(Long id, String title, String url, String album, long AuthorId) {
        this.id = id;
        this.title = title;
        this.url = url;
        this.album = album;
        this.AuthorId = AuthorId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAudioDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public String getAlbum() {
        return album;
    }

    public void setAlbum(String album) {
        this.album = album;
    }

    public long getAuthorId() {
        return AuthorId;
    }

    public void setAuthorId(long AuthorId) {
        this.AuthorId = AuthorId;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<History> getAudiosHistory() {
        if (audiosHistory == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            HistoryDao targetDao = daoSession.getHistoryDao();
            List<History> audiosHistoryNew = targetDao._queryAudio_AudiosHistory(id);
            synchronized (this) {
                if(audiosHistory == null) {
                    audiosHistory = audiosHistoryNew;
                }
            }
        }
        return audiosHistory;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetAudiosHistory() {
        audiosHistory = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<PlaylistMedia> getListPlaylistMediaAudio() {
        if (listPlaylistMediaAudio == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PlaylistMediaDao targetDao = daoSession.getPlaylistMediaDao();
            List<PlaylistMedia> listPlaylistMediaAudioNew = targetDao._queryAudio_ListPlaylistMediaAudio(id);
            synchronized (this) {
                if(listPlaylistMediaAudio == null) {
                    listPlaylistMediaAudio = listPlaylistMediaAudioNew;
                }
            }
        }
        return listPlaylistMediaAudio;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetListPlaylistMediaAudio() {
        listPlaylistMediaAudio = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    
    
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeLong(id);
		dest.writeString(title);
		dest.writeSerializable(url);
		dest.writeString(album);	
		dest.writeLong(AuthorId);	
	}
    
	 public static final Parcelable.Creator<Audio> CREATOR = new Parcelable.Creator<Audio>() {

		public Audio createFromParcel(Parcel source) {
			long id = source.readLong(); 
			String title = source.readString();
			URI uri = (URI)source.readSerializable();
			String album = source.readString();
			long authorId = source.readLong();

			
			Audio audio = new Audio(id, title, uri.toString(), album, authorId);
						
			return audio;
		}

		public Audio[] newArray(int size) {
			return new Audio[size];
		}
	
	 };

	public int describeContents() {
		return 0;
	} 
    
}
