package br.unb.mobileMedia.core.domain;

import java.util.List;

import br.unb.mobileMedia.core.db.DaoSession;
import br.unb.mobileMedia.core.db.HistoryDao;
import br.unb.mobileMedia.core.db.PlaylistMediaDao;
import br.unb.mobileMedia.core.db.VideoDao;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table VIDEO.
 */
public class Video {

    private Long id;
    private String title;
    private String url;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient VideoDao myDao;

    private List<History> videosHistory;
    private List<PlaylistMedia> listPlaylistMediaVideo;

    public Video() {
    }

    public Video(Long id) {
        this.id = id;
    }

    public Video(Long id, String title, String url) {
        this.id = id;
        this.title = title;
        this.url = url;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getVideoDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<History> getVideosHistory() {
        if (videosHistory == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            HistoryDao targetDao = daoSession.getHistoryDao();
            List<History> videosHistoryNew = targetDao._queryVideo_VideosHistory(id);
            synchronized (this) {
                if(videosHistory == null) {
                    videosHistory = videosHistoryNew;
                }
            }
        }
        return videosHistory;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetVideosHistory() {
        videosHistory = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<PlaylistMedia> getListPlaylistMediaVideo() {
        if (listPlaylistMediaVideo == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PlaylistMediaDao targetDao = daoSession.getPlaylistMediaDao();
            List<PlaylistMedia> listPlaylistMediaVideoNew = targetDao._queryVideo_ListPlaylistMediaVideo(id);
            synchronized (this) {
                if(listPlaylistMediaVideo == null) {
                    listPlaylistMediaVideo = listPlaylistMediaVideoNew;
                }
            }
        }
        return listPlaylistMediaVideo;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetListPlaylistMediaVideo() {
        listPlaylistMediaVideo = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
