package br.unb.mobileMedia.core.domain;

import java.util.List;

import br.unb.mobileMedia.core.db.AlbumDao;
import br.unb.mobileMedia.core.db.AudioDao;
import br.unb.mobileMedia.core.db.AuthorDao;
import br.unb.mobileMedia.core.db.DaoSession;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table ALBUM.
 */
public class Album {

    private Long id;
    /** Not-null value. */
    private String name;
    private long autorId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AlbumDao myDao;

    private Author author;
    private Long author__resolvedKey;

    private List<Audio> audioAlbum;

    public Album() {
    }

    public Album(Long id) {
        this.id = id;
    }

    public Album(Long id, String name, long autorId) {
        this.id = id;
        this.name = name;
        this.autorId = autorId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAlbumDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    public long getAutorId() {
        return autorId;
    }

    public void setAutorId(long autorId) {
        this.autorId = autorId;
    }

    /** To-one relationship, resolved on first access. */
    public Author getAuthor() {
        long __key = this.autorId;
        if (author__resolvedKey == null || !author__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AuthorDao targetDao = daoSession.getAuthorDao();
            Author authorNew = targetDao.load(__key);
            synchronized (this) {
                author = authorNew;
            	author__resolvedKey = __key;
            }
        }
        return author;
    }

    public void setAuthor(Author author) {
        if (author == null) {
            throw new DaoException("To-one property 'autorId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.author = author;
            autorId = author.getId();
            author__resolvedKey = autorId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Audio> getAudioAlbum() {
        if (audioAlbum == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AudioDao targetDao = daoSession.getAudioDao();
            List<Audio> audioAlbumNew = targetDao._queryAlbum_AudioAlbum(id);
            synchronized (this) {
                if(audioAlbum == null) {
                    audioAlbum = audioAlbumNew;
                }
            }
        }
        return audioAlbum;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetAudioAlbum() {
        audioAlbum = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
