package br.unb.mobileMedia.core.db;

import java.util.ArrayList;
import java.util.List;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import br.unb.mobileMedia.core.domain.Album;
import br.unb.mobileMedia.core.domain.Author;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table AUTHOR.
*/
public class AuthorDao extends AbstractDao<Author, Long> {

    public static final String TABLENAME = "AUTHOR";

    /**
     * Properties of entity Author.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
    };

    private DaoSession daoSession;


    public AuthorDao(DaoConfig config) {
        super(config);
    }
    
    public AuthorDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'AUTHOR' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NAME' TEXT NOT NULL );"); // 1: name
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'AUTHOR'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Author entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
    }

    @Override
    protected void attachEntity(Author entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Author readEntity(Cursor cursor, int offset) {
        Author entity = new Author( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1) // name
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Author entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Author entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Author entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    
    
    public List<Album> getAlbumByAuthor(Long authorId){
    	
    	List<Album> albums = new ArrayList<Album>();
    	
    	
    	Cursor cursorAuthor = super.db.rawQuery(DBConstants.SELECT_AUTHORS_BY_ID,
				new String[] { authorId.toString() });

		if (cursorAuthor.getCount() == 1 && cursorAuthor.moveToFirst()) {
			Author author = this.cursorToAuthor(cursorAuthor);
			
			Cursor cursorAlbum = super.db.rawQuery(DBConstants.SELECT_ALBUMS_BY_AUTHOR, new String[]{author.getId().toString()});
			
			if(cursorAlbum.getCount() > 0 && cursorAlbum.moveToFirst()){
				do{
					albums.add(cursorToAlbum(cursorAlbum));
				}while(cursorAlbum.moveToNext());
			}
			
			cursorAlbum.close();
			
		}
		
		cursorAuthor.close();
		
		return albums;
    }
    
    
    /*
	 * Converts a cursor into an Album.
	 */
	private Album cursorToAlbum(Cursor cursor){
		
		Long id = cursor.getLong(cursor.getColumnIndex(DBConstants.ALBUM_ID_COLUMN));
		String name = cursor.getString(cursor.getColumnIndex(DBConstants.ALBUM_NAME_COLUMN));
		byte [] image = cursor.getBlob(cursor.getColumnIndex(DBConstants.ALBUM_IMAGE_COLUNM));
		Long authorId = cursor.getLong(cursor.getColumnIndex(DBConstants.ALBUM_AUTHOR_ID));
		
		Album album = new Album(id, name, image, authorId);
		return album;
	}
	
	
	/*
	 * Converts a cursor into an Author.
	 */
	private Author cursorToAuthor(Cursor cursor) {
		Long id = cursor.getLong(cursor
				.getColumnIndex(DBConstants.AUTHOR_ID_COLUMN));
		String name = cursor.getString(cursor
				.getColumnIndex(DBConstants.AUTHOR_NAME_COLUMN));
		Author author = new Author(id, name);
		return author;
	}

    
}
