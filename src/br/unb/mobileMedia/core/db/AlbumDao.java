package br.unb.mobileMedia.core.db;

import java.util.ArrayList;
import java.util.List;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import br.unb.mobileMedia.core.domain.Album;
import br.unb.mobileMedia.core.domain.Audio;
import br.unb.mobileMedia.core.domain.Author;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ALBUM.
*/
public class AlbumDao extends AbstractDao<Album, Long> {

    public static final String TABLENAME = "ALBUM";

    /**
     * Properties of entity Album.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Image = new Property(2, byte[].class, "Image", false, "IMAGE");
        public final static Property AuthorId = new Property(3, long.class, "authorId", false, "AUTHOR_ID");
    };

    private DaoSession daoSession;

    private Query<Album> author_AlbunsQuery;

    public AlbumDao(DaoConfig config) {
        super(config);
    }
    
    public AlbumDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ALBUM' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NAME' TEXT NOT NULL ," + // 1: name
                "'IMAGE' BLOB," + // 2: Image
                "'AUTHOR_ID' INTEGER NOT NULL );"); // 3: authorId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ALBUM'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Album entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
 
        byte[] Image = entity.getImage();
        if (Image != null) {
            stmt.bindBlob(3, Image);
        }
        stmt.bindLong(4, entity.getAuthorId());
    }

    @Override
    protected void attachEntity(Album entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Album readEntity(Cursor cursor, int offset) {
        Album entity = new Album( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getBlob(offset + 2), // Image
            cursor.getLong(offset + 3) // authorId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Album entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setImage(cursor.isNull(offset + 2) ? null : cursor.getBlob(offset + 2));
        entity.setAuthorId(cursor.getLong(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Album entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Album entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "albuns" to-many relationship of Author. */
    public List<Album> _queryAuthor_Albuns(long authorId) {
        synchronized (this) {
            if (author_AlbunsQuery == null) {
                QueryBuilder<Album> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.AuthorId.eq(null));
                author_AlbunsQuery = queryBuilder.build();
            }
        }
        Query<Album> query = author_AlbunsQuery.forCurrentThread();
        query.setParameter(0, authorId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getAuthorDao().getAllColumns());
            builder.append(" FROM ALBUM T");
            builder.append(" LEFT JOIN AUTHOR T0 ON T.'AUTHOR_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Album loadCurrentDeep(Cursor cursor, boolean lock) {
        Album entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Author author = loadCurrentOther(daoSession.getAuthorDao(), cursor, offset);
         if(author != null) {
            entity.setAuthor(author);
        }

        return entity;    
    }

    public Album loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Album> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Album> list = new ArrayList<Album>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Album> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Album> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
    
    
    public List<Audio> getAudioByAlbum(Long albumId){
    	List<Audio> audios = new ArrayList<Audio>();
    	
    	Cursor cursor = super.db.rawQuery(DBConstants.SELECT_AUDIO_BY_ALBUM, new String[]{albumId.toString()});
    	
    	if(cursor.getCount() > 0 && cursor.moveToFirst()){
    		do{
    			audios.add(cursorToAudio(cursor));
    		}while(cursor.moveToNext());
    	}
    	
    	return audios;
    }
    
    
    /*
	 * Converts a cursor into an Audio.
	 */
	private Audio cursorToAudio(Cursor cursor){
		
		Long id = cursor.getLong(cursor.getColumnIndex(DBConstants.AUDIO_ID_COLUMN));
		String title = cursor.getString(cursor.getColumnIndex(DBConstants.AUDIO_TITLE_COLUMN));
		String url   = cursor.getString(cursor.getColumnIndex(DBConstants.AUDIO_URL_COLUMN));
		Long albumId = cursor.getLong(cursor.getColumnIndex(DBConstants.AUDIO_ALBUM_ID_COLUMN));
		
		Audio audio = new Audio(id, title, url, albumId);
		return audio;
	}
}
